import React, { useState } from 'react';
import { motion } from 'framer-motion';
import {
  Globe,
  Plus,
  Settings,
  Trash2,
  ExternalLink,
  Shield,
  Activity,
  AlertCircle,
  CheckCircle,
  Clock,
  RefreshCw
} from 'lucide-react';

interface ProxyRule {
  id: string;
  subdomain: string;
  domain: string;
  target: string;
  container: string;
  ssl: boolean;
  status: 'active' | 'inactive' | 'error';
  autoGenerated: boolean;
  lastCheck: string;
}

const proxyRules: ProxyRule[] = [
  {
    id: '1',
    subdomain: 'app',
    domain: 'example.com',
    target: 'http://localhost:8080',
    container: 'web-app',
    ssl: true,
    status: 'active',
    autoGenerated: true,
    lastCheck: '2024-01-16 10:30'
  },
  {
    id: '2',
    subdomain: 'api',
    domain: 'example.com',
    target: 'http://localhost:3000',
    container: 'api-server',
    ssl: true,
    status: 'active',
    autoGenerated: true,
    lastCheck: '2024-01-16 10:30'
  },
  {
    id: '3',
    subdomain: 'monitor',
    domain: 'example.com',
    target: 'http://localhost:3001',
    container: 'grafana',
    ssl: true,
    status: 'inactive',
    autoGenerated: false,
    lastCheck: '2024-01-16 09:15'
  },
  {
    id: '4',
    subdomain: 'admin',
    domain: 'example.com',
    target: 'http://localhost:8081',
    container: 'admin-panel',
    ssl: false,
    status: 'error',
    autoGenerated: false,
    lastCheck: '2024-01-16 08:45'
  }
];

const statusColors = {
  active: 'bg-green-100 text-green-800 border-green-200',
  inactive: 'bg-gray-100 text-gray-800 border-gray-200',
  error: 'bg-red-100 text-red-800 border-red-200'
};

const statusIcons = {
  active: CheckCircle,
  inactive: Clock,
  error: AlertCircle
};

export const Proxy: React.FC = () => {
  const [autoProxy, setAutoProxy] = useState(true);
  const [mainDomain, setMainDomain] = useState('example.com');
  const [showAddRule, setShowAddRule] = useState(false);

  const handleToggleRule = (id: string) => {
    console.log(`Toggle rule ${id}`);
    // Ici on implémenterait la logique de basculement
  };

  const handleDeleteRule = (id: string) => {
    console.log(`Delete rule ${id}`);
    // Ici on implémenterait la logique de suppression
  };

  const handleTestRule = (id: string) => {
    console.log(`Test rule ${id}`);
    // Ici on implémenterait la logique de test
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-white">Proxy & Domaines</h1>
          <p className="mt-2 text-gray-400">
            Configuration automatique des sous-domaines avec Caddy
          </p>
        </div>
        
        <div className="flex space-x-3">
          <button
            onClick={() => setShowAddRule(true)}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center space-x-2"
          >
            <Plus className="h-4 w-4" />
            <span>Nouvelle Règle</span>
          </button>
        </div>
      </div>

      {/* Configuration principale */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="bg-gray-800 rounded-lg border border-gray-700 p-6"
      >
        <h2 className="text-xl font-semibold text-white mb-4">Configuration Proxy</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">
              Domaine Principal
            </label>
            <input
              type="text"
              value={mainDomain}
              onChange={(e) => setMainDomain(e.target.value)}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="example.com"
            />
          </div>
          
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-sm font-medium text-white">Proxy Automatique</h3>
              <p className="text-sm text-gray-400">
                Créer automatiquement des sous-domaines pour les conteneurs
              </p>
            </div>
            <button
              onClick={() => setAutoProxy(!autoProxy)}
              className={`relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${
                autoProxy ? 'bg-blue-600' : 'bg-gray-600'
              }`}
            >
              <span
                className={`pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out ${
                  autoProxy ? 'translate-x-5' : 'translate-x-0'
                }`}
              />
            </button>
          </div>
        </div>
      </motion.div>

      {/* Règles de proxy */}
      <div className="space-y-4">
        <h2 className="text-xl font-semibold text-white">Règles de Proxy</h2>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {proxyRules.map((rule, index) => {
            const StatusIcon = statusIcons[rule.status];
            
            return (
              <motion.div
                key={rule.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
                className="bg-gray-800 rounded-lg border border-gray-700 p-6 hover:border-gray-600 transition-all duration-200"
              >
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <Globe className="h-5 w-5 text-blue-400" />
                      <h3 className="text-lg font-semibold text-white">
                        {rule.subdomain}.{rule.domain}
                      </h3>
                      <a
                        href={`https://${rule.subdomain}.${rule.domain}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-400 hover:text-blue-300"
                      >
                        <ExternalLink className="h-4 w-4" />
                      </a>
                    </div>
                    
                    <div className="flex items-center space-x-3 mb-3">
                      <span
                        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${
                          statusColors[rule.status]
                        }`}
                      >
                        <StatusIcon className="h-3 w-3 mr-1" />
                        {rule.status}
                      </span>
                      {rule.ssl && (
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 border border-green-200">
                          <Shield className="h-3 w-3 mr-1" />
                          SSL
                        </span>
                      )}
                      {rule.autoGenerated && (
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800 border border-purple-200">
                          Auto
                        </span>
                      )}
                    </div>
                  </div>
                </div>

                <div className="space-y-2 text-sm mb-4">
                  <div className="flex justify-between">
                    <span className="text-gray-400">Cible:</span>
                    <span className="text-gray-300 font-mono">{rule.target}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">Conteneur:</span>
                    <span className="text-blue-400">{rule.container}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">Dernière vérification:</span>
                    <span className="text-gray-300">{rule.lastCheck}</span>
                  </div>
                </div>

                <div className="flex space-x-2">
                  <button
                    onClick={() => handleTestRule(rule.id)}
                    className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-3 rounded-md transition-colors duration-200 flex items-center justify-center space-x-1"
                  >
                    <Activity className="h-4 w-4" />
                    <span>Tester</span>
                  </button>
                  <button
                    onClick={() => handleToggleRule(rule.id)}
                    className={`py-2 px-3 rounded-md transition-colors duration-200 ${
                      rule.status === 'active'
                        ? 'bg-orange-600 hover:bg-orange-700'
                        : 'bg-green-600 hover:bg-green-700'
                    } text-white`}
                  >
                    {rule.status === 'active' ? (
                      <RefreshCw className="h-4 w-4" />
                    ) : (
                      <Activity className="h-4 w-4" />
                    )}
                  </button>
                  <button
                    className="bg-gray-600 hover:bg-gray-700 text-white py-2 px-3 rounded-md transition-colors duration-200"
                  >
                    <Settings className="h-4 w-4" />
                  </button>
                  {!rule.autoGenerated && (
                    <button
                      onClick={() => handleDeleteRule(rule.id)}
                      className="bg-red-600 hover:bg-red-700 text-white py-2 px-3 rounded-md transition-colors duration-200"
                    >
                      <Trash2 className="h-4 w-4" />
                    </button>
                  )}
                </div>
              </motion.div>
            );
          })}
        </div>
      </div>

      {/* Stats rapides */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.6 }}
        className="grid grid-cols-1 md:grid-cols-4 gap-4"
      >
        <div className="bg-gray-800 rounded-lg border border-gray-700 p-4">
          <div className="flex items-center">
            <Globe className="h-5 w-5 text-blue-400 mr-2" />
            <div>
              <div className="text-2xl font-bold text-white">4</div>
              <div className="text-sm text-gray-400">Règles Actives</div>
            </div>
          </div>
        </div>
        <div className="bg-gray-800 rounded-lg border border-gray-700 p-4">
          <div className="flex items-center">
            <Shield className="h-5 w-5 text-green-400 mr-2" />
            <div>
              <div className="text-2xl font-bold text-white">3</div>
              <div className="text-sm text-gray-400">Certificats SSL</div>
            </div>
          </div>
        </div>
        <div className="bg-gray-800 rounded-lg border border-gray-700 p-4">
          <div className="flex items-center">
            <Activity className="h-5 w-5 text-purple-400 mr-2" />
            <div>
              <div className="text-2xl font-bold text-white">2</div>
              <div className="text-sm text-gray-400">Auto-générées</div>
            </div>
          </div>
        </div>
        <div className="bg-gray-800 rounded-lg border border-gray-700 p-4">
          <div className="flex items-center">
            <AlertCircle className="h-5 w-5 text-red-400 mr-2" />
            <div>
              <div className="text-2xl font-bold text-white">1</div>
              <div className="text-sm text-gray-400">Erreurs</div>
            </div>
          </div>
        </div>
      </motion.div>
    </div>
  );
};