export interface Container {
  id: string;
  name: string;
  image: string;
  status: 'running' | 'stopped' | 'restarting' | 'paused' | 'exited';
  state: string;
  uptime: string;
  ports: Port[];
  cpu: number;
  memory: string;
  memoryUsage: number;
  smartWakeUp: boolean;
  autoUpdate: boolean;
  created: string;
  labels: Record<string, string>;
  networks: string[];
  mounts: Mount[];
  healthStatus?: 'healthy' | 'unhealthy' | 'starting' | 'none';
  restartPolicy?: string;
  environment?: Record<string, string>;
}

export interface Port {
  privatePort: number;
  publicPort?: number;
  type: 'tcp' | 'udp';
  ip?: string;
}

export interface Mount {
  type: 'bind' | 'volume' | 'tmpfs';
  source: string;
  destination: string;
  mode: string;
  rw: boolean;
}

export interface Stack {
  id: string;
  name: string;
  description: string;
  status: 'running' | 'stopped' | 'partial' | 'error';
  services: Service[];
  runningServices: number;
  totalServices: number;
  uptime: string;
  githubRepo?: string;
  autoUpdate: boolean;
  lastDeploy: string;
  composeFile: string;
  environment: Record<string, string>;
  networks?: string[];
  volumes?: Volume[];
}

export interface Service {
  id: string;
  name: string;
  image: string;
  status: 'running' | 'stopped' | 'restarting';
  replicas: number;
  ports: Port[];
  healthCheck?: HealthCheck;
  resources?: ServiceResources;
}

export interface ServiceResources {
  cpuLimit?: string;
  memoryLimit?: string;
  cpuReservation?: string;
  memoryReservation?: string;
}

export interface Volume {
  name: string;
  driver: string;
  mountpoint: string;
  scope: string;
  labels?: Record<string, string>;
}

export interface HealthCheck {
  test: string[];
  interval: string;
  timeout: string;
  retries: number;
  startPeriod: string;
}

export interface ProxyRule {
  id: string;
  subdomain: string;
  domain: string;
  target: string;
  container?: string;
  stack?: string;
  ssl: boolean;
  status: 'active' | 'inactive' | 'error' | 'pending';
  autoGenerated: boolean;
  lastCheck: string;
  healthCheck: boolean;
  redirects?: Redirect[];
  middleware?: string[];
  rateLimit?: RateLimit;
}

export interface RateLimit {
  enabled: boolean;
  requests: number;
  window: string;
}

export interface Redirect {
  from: string;
  to: string;
  permanent: boolean;
}

export interface Schedule {
  id: string;
  name: string;
  description: string;
  target: string;
  targetType: 'container' | 'stack';
  action: 'start' | 'stop' | 'restart' | 'update';
  scheduleType: 'cron' | 'interval' | 'once';
  schedule: string;
  enabled: boolean;
  lastRun?: string;
  nextRun: string;
  status: 'active' | 'inactive' | 'error' | 'running';
  conditions?: Condition[];
  notifications?: NotificationConfig;
}

export interface NotificationConfig {
  onSuccess: boolean;
  onFailure: boolean;
  channels: string[];
}

export interface Condition {
  type: 'cpu' | 'memory' | 'disk' | 'network' | 'time';
  operator: 'gt' | 'lt' | 'eq' | 'gte' | 'lte';
  value: number | string;
}

export interface Update {
  id: string;
  name: string;
  type: 'container' | 'stack';
  currentVersion: string;
  latestVersion: string;
  hasUpdate: boolean;
  autoUpdate: boolean;
  lastUpdated: string;
  status: 'up-to-date' | 'update-available' | 'updating' | 'error';
  description: string;
  changelog?: string;
  size?: number;
  securityUpdate?: boolean;
  rollbackAvailable?: boolean;
}

export interface SystemStats {
  containers: {
    total: number;
    running: number;
    stopped: number;
    paused: number;
  };
  stacks: {
    total: number;
    running: number;
    stopped: number;
    partial: number;
  };
  system: {
    cpu: number;
    memory: {
      used: number;
      total: number;
      percentage: number;
    };
    disk: {
      used: number;
      total: number;
      percentage: number;
    };
    uptime: string;
    load?: number[];
  };
  docker: {
    version: string;
    apiVersion: string;
    status: 'connected' | 'disconnected' | 'error';
    info?: DockerInfo;
  };
  network?: NetworkStats;
}

export interface DockerInfo {
  containers: number;
  containersRunning: number;
  containersStopped: number;
  images: number;
  serverVersion: string;
  kernelVersion: string;
  operatingSystem: string;
  architecture: string;
  memTotal: number;
  swapTotal: number;
}

export interface NetworkStats {
  interfaces: NetworkInterface[];
  totalBytesReceived: number;
  totalBytesSent: number;
}

export interface NetworkInterface {
  name: string;
  bytesReceived: number;
  bytesSent: number;
  packetsReceived: number;
  packetsSent: number;
}

export interface Activity {
  id: string;
  type: 'container' | 'stack' | 'proxy' | 'schedule' | 'update' | 'system';
  action: string;
  target: string;
  message: string;
  timestamp: string;
  status: 'success' | 'error' | 'warning' | 'info';
  details?: Record<string, any>;
  user?: string;
  duration?: number;
}

export interface Settings {
  docker: {
    host: string;
    apiVersion: string;
    tlsVerify: boolean;
    certPath?: string;
    timeout: number;
  };
  proxy: {
    enabled: boolean;
    provider: 'caddy' | 'traefik' | 'nginx';
    configPath: string;
    mainDomain: string;
    autoSSL: boolean;
    forceHTTPS: boolean;
    defaultHeaders?: Record<string, string>;
  };
  smartWakeUp: {
    enabled: boolean;
    timeout: number;
    retries: number;
    healthCheckInterval: number;
    gracePeriod: number;
  };
  notifications: {
    email: {
      enabled: boolean;
      smtp: {
        host: string;
        port: number;
        secure: boolean;
        user: string;
        password: string;
      };
      from: string;
      to: string[];
    };
    discord: {
      enabled: boolean;
      webhookUrl: string;
      username?: string;
      avatar?: string;
    };
    slack: {
      enabled: boolean;
      webhookUrl: string;
      channel?: string;
      username?: string;
    };
    pushover: {
      enabled: boolean;
      userKey: string;
      appToken: string;
    };
  };
  security: {
    apiKey: string;
    enableAuth: boolean;
    sessionTimeout: number;
    rateLimiting: {
      enabled: boolean;
      maxRequests: number;
      windowMs: number;
    };
    cors: {
      enabled: boolean;
      origins: string[];
    };
  };
  updates: {
    autoCheck: boolean;
    checkInterval: string;
    autoUpdate: boolean;
    updateSchedule: string;
    excludeImages: string[];
    backupBeforeUpdate: boolean;
  };
  monitoring: {
    enabled: boolean;
    metricsRetention: string;
    alertThresholds: {
      cpu: number;
      memory: number;
      disk: number;
    };
  };
  backup: {
    enabled: boolean;
    schedule: string;
    retention: number;
    destination: string;
    compression: boolean;
  };
}

export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
  timestamp: string;
  meta?: ResponseMeta;
}

export interface ResponseMeta {
  version: string;
  requestId: string;
  executionTime: number;
  cached?: boolean;
}

export interface PaginatedResponse<T> extends ApiResponse<T[]> {
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
    hasNext: boolean;
    hasPrev: boolean;
  };
}

export interface WebSocketMessage {
  event: string;
  data: any;
  timestamp: string;
  id?: string;
}

export interface Notification {
  id: string;
  title: string;
  message: string;
  type: 'success' | 'error' | 'warning' | 'info';
  timestamp: string;
  read: boolean;
  actions?: NotificationAction[];
}

export interface NotificationAction {
  label: string;
  action: string;
  style: 'primary' | 'secondary' | 'danger';
}

export interface Theme {
  name: string;
  colors: {
    primary: string;
    secondary: string;
    accent: string;
    background: string;
    surface: string;
    text: string;
    textSecondary: string;
    border: string;
    success: string;
    warning: string;
    error: string;
    info: string;
  };
  fonts: {
    primary: string;
    mono: string;
  };
  spacing: {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
  };
}

export interface User {
  id: string;
  username: string;
  email: string;
  role: 'admin' | 'user' | 'viewer';
  permissions: string[];
  lastLogin: string;
  preferences: UserPreferences;
}

export interface UserPreferences {
  theme: 'dark' | 'light' | 'auto';
  language: string;
  timezone: string;
  notifications: {
    email: boolean;
    push: boolean;
    desktop: boolean;
  };
  dashboard: {
    layout: string;
    widgets: string[];
  };
}

export interface Metric {
  name: string;
  value: number;
  unit: string;
  timestamp: string;
  labels?: Record<string, string>;
}

export interface Alert {
  id: string;
  name: string;
  description: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  status: 'active' | 'resolved' | 'suppressed';
  timestamp: string;
  source: string;
  conditions: AlertCondition[];
  actions: AlertAction[];
}

export interface AlertCondition {
  metric: string;
  operator: 'gt' | 'lt' | 'eq' | 'gte' | 'lte';
  threshold: number;
  duration: string;
}

export interface AlertAction {
  type: 'email' | 'webhook' | 'script';
  config: Record<string, any>;
}

export interface Backup {
  id: string;
  name: string;
  type: 'full' | 'incremental' | 'differential';
  status: 'running' | 'completed' | 'failed' | 'cancelled';
  size: number;
  timestamp: string;
  duration: number;
  includes: string[];
  excludes: string[];
  destination: string;
}

export interface LogEntry {
  id: string;
  timestamp: string;
  level: 'debug' | 'info' | 'warn' | 'error' | 'fatal';
  source: string;
  message: string;
  metadata?: Record<string, any>;
  tags?: string[];
}

export interface Plugin {
  id: string;
  name: string;
  version: string;
  description: string;
  author: string;
  enabled: boolean;
  config: Record<string, any>;
  permissions: string[];
  dependencies: string[];
}