export interface Container {
  id: string;
  name: string;
  image: string;
  status: 'running' | 'stopped' | 'restarting' | 'paused' | 'exited';
  state: string;
  uptime: string;
  ports: Port[];
  cpu: number;
  memory: string;
  memoryUsage: number;
  smartWakeUp: boolean;
  autoUpdate: boolean;
  created: string;
  labels: Record<string, string>;
  networks: string[];
  mounts: Mount[];
}

export interface Port {
  privatePort: number;
  publicPort?: number;
  type: 'tcp' | 'udp';
  ip?: string;
}

export interface Mount {
  type: 'bind' | 'volume' | 'tmpfs';
  source: string;
  destination: string;
  mode: string;
  rw: boolean;
}

export interface Stack {
  id: string;
  name: string;
  description: string;
  status: 'running' | 'stopped' | 'partial' | 'error';
  services: Service[];
  runningServices: number;
  totalServices: number;
  uptime: string;
  githubRepo?: string;
  autoUpdate: boolean;
  lastDeploy: string;
  composeFile: string;
  environment: Record<string, string>;
}

export interface Service {
  id: string;
  name: string;
  image: string;
  status: 'running' | 'stopped' | 'restarting';
  replicas: number;
  ports: Port[];
  healthCheck?: HealthCheck;
}

export interface HealthCheck {
  test: string[];
  interval: string;
  timeout: string;
  retries: number;
  startPeriod: string;
}

export interface ProxyRule {
  id: string;
  subdomain: string;
  domain: string;
  target: string;
  container?: string;
  stack?: string;
  ssl: boolean;
  status: 'active' | 'inactive' | 'error' | 'pending';
  autoGenerated: boolean;
  lastCheck: string;
  healthCheck: boolean;
  redirects?: Redirect[];
}

export interface Redirect {
  from: string;
  to: string;
  permanent: boolean;
}

export interface Schedule {
  id: string;
  name: string;
  description: string;
  target: string;
  targetType: 'container' | 'stack';
  action: 'start' | 'stop' | 'restart' | 'update';
  scheduleType: 'cron' | 'interval' | 'once';
  schedule: string;
  enabled: boolean;
  lastRun?: string;
  nextRun: string;
  status: 'active' | 'inactive' | 'error' | 'running';
  conditions?: Condition[];
}

export interface Condition {
  type: 'cpu' | 'memory' | 'disk' | 'network' | 'time';
  operator: 'gt' | 'lt' | 'eq' | 'gte' | 'lte';
  value: number | string;
}

export interface Update {
  id: string;
  name: string;
  type: 'container' | 'stack';
  currentVersion: string;
  latestVersion: string;
  hasUpdate: boolean;
  autoUpdate: boolean;
  lastUpdated: string;
  status: 'up-to-date' | 'update-available' | 'updating' | 'error';
  description: string;
  changelog?: string;
  size?: number;
}

export interface SystemStats {
  containers: {
    total: number;
    running: number;
    stopped: number;
    paused: number;
  };
  stacks: {
    total: number;
    running: number;
    stopped: number;
    partial: number;
  };
  system: {
    cpu: number;
    memory: {
      used: number;
      total: number;
      percentage: number;
    };
    disk: {
      used: number;
      total: number;
      percentage: number;
    };
    uptime: string;
  };
  docker: {
    version: string;
    apiVersion: string;
    status: 'connected' | 'disconnected' | 'error';
  };
}

export interface Activity {
  id: string;
  type: 'container' | 'stack' | 'proxy' | 'schedule' | 'update' | 'system';
  action: string;
  target: string;
  message: string;
  timestamp: string;
  status: 'success' | 'error' | 'warning' | 'info';
  details?: Record<string, any>;
}

export interface Settings {
  docker: {
    host: string;
    apiVersion: string;
    tlsVerify: boolean;
    certPath?: string;
  };
  proxy: {
    enabled: boolean;
    provider: 'caddy' | 'traefik' | 'nginx';
    configPath: string;
    mainDomain: string;
    autoSSL: boolean;
    forceHTTPS: boolean;
  };
  smartWakeUp: {
    enabled: boolean;
    timeout: number;
    retries: number;
    healthCheckInterval: number;
  };
  notifications: {
    email: {
      enabled: boolean;
      smtp: {
        host: string;
        port: number;
        secure: boolean;
        user: string;
        password: string;
      };
      from: string;
      to: string[];
    };
    discord: {
      enabled: boolean;
      webhookUrl: string;
    };
    slack: {
      enabled: boolean;
      webhookUrl: string;
    };
  };
  security: {
    apiKey: string;
    enableAuth: boolean;
    sessionTimeout: number;
    rateLimiting: {
      enabled: boolean;
      maxRequests: number;
      windowMs: number;
    };
  };
  updates: {
    autoCheck: boolean;
    checkInterval: string;
    autoUpdate: boolean;
    updateSchedule: string;
    excludeImages: string[];
  };
}

export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
  timestamp: string;
}

export interface PaginatedResponse<T> extends ApiResponse<T[]> {
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}